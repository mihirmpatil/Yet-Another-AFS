// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_package = "ex.grpc";
option objc_class_prefix = "AFS";

package afs;

// The greeting service definition.
service AFS {
  // Sends multiple greetings
  rpc afs_open (Request) returns (stream Reply) {}
  rpc afs_getattr (Request) returns (Stat) {}
  rpc afs_readdir (Request) returns (DirentReply) {}
  rpc afs_flush (stream FlushRequest) returns (FlushReply) {}
  rpc afs_rmdir (Request) returns (StatusReply) {}
  rpc afs_mkdir (Request) returns (StatusReply) {}
  rpc afs_unlink(Request) returns (StatusReply) {}
  rpc afs_rename(RenameRequest) returns (StatusReply) {}
}

// The request message containing the user's name and how many greetings
// they want.
message Request {
  string name = 1;
}

// A response message containing a greeting
message Reply {
  string data = 1;
}

message Stat {
	int32 dev = 1;
	int32 ino = 2;
	int32 mode = 3;
	int32 nlink = 4;
	int32 uid = 5;
	int32 gid = 6;
	int32 rdev = 7;
	int64 size = 8;
	int64 a_time = 9;
	int64 m_time = 10;
	int64 c_time = 11;
	int32 block_size = 12;
	int32 blocks = 13;
}

message Dirent {
	string name = 1;
	int32 reclen = 2;
	int32 d_type = 3;	//type of file
}

message DirentReply {
	int32 count = 1;
	repeated Dirent dirent = 2;
}

message FlushRequest {
	string path = 1;
	bytes data = 2;
}

message FlushReply {
	int32 status = 1;
}

message StatusReply{
	int32 status = 1;
}

message RenameRequest {
	string old_name = 1;
	string new_name = 2;
}
